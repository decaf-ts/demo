import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import { inject, InjectionToken } from '@angular/core';
import { cleanSpaces, getLocaleFromClassName } from '../helpers';
export class I18nLoader {
    static loadFromHttp(http) {
        function getSuffix() {
            const today = new Date();
            return `.json?version=${today.getFullYear()}${today.getMonth()}${today.getDay()}`;
        }
        return new (class extends TranslateHttpLoader {
            getTranslation(lang) {
                const res = super.getTranslation(lang);
                return res;
            }
        })(http, './assets/i18n/', getSuffix());
    }
}
export function getLocaleContext(clazz, suffix) {
    return getLocaleFromClassName(clazz, suffix);
}
/**
 * @description Generates a localized string by combining locale and phrase
 * @summary This utility function creates a properly formatted locale string by combining
 * a locale identifier with a phrase. It handles edge cases such as empty phrases,
 * missing locales, and phrases that already include the locale prefix. This function
 * is useful for ensuring consistent formatting of localized strings throughout the application.
 *
 * @param {string} locale - The locale identifier (e.g., 'en', 'fr')
 * @param {string | undefined} phrase - The phrase to localize
 * @return {string} The formatted locale string, or empty string if phrase is undefined
 *
 * @function generateLocaleFromString
 * @memberOf module:for-angular
 */
export function getLocaleContextByKey(locale, phrase) {
    if (!phrase)
        return locale;
    if (!locale || phrase.includes(`${locale}.`))
        return phrase;
    const parts = phrase.split(' ');
    return `${locale}.${cleanSpaces(parts.join('.'), true)}`;
}
export const I18N_CONFIG_TOKEN = new InjectionToken('I18N_CONFIG_TOKEN');
export function I18nLoaderFactory(http) {
    const { resources, versionedSuffix } = inject(I18N_CONFIG_TOKEN, { optional: true }) ?? getI18nLoaderFactoryProviderConfig().useValue;
    return new MultiI18nLoader(http, resources, versionedSuffix);
}
export function getI18nLoaderFactoryProviderConfig(resources = [], versionedSuffix = false) {
    if (!Array.isArray(resources))
        resources = [resources];
    return {
        provide: I18N_CONFIG_TOKEN,
        useValue: { resources: [
                { prefix: './assets/i18n/', suffix: '.json' },
                ...resources
            ], versionedSuffix }
    };
}
export class MultiI18nLoader {
    constructor(http, resources = [], versionedSuffix = false) {
        this.http = http;
        this.resources = resources;
        this.versionedSuffix = versionedSuffix;
    }
    getSuffix(suffix) {
        if (!this.versionedSuffix)
            return suffix;
        const today = new Date();
        return `${suffix}?version=${today.getFullYear()}${today.getMonth()}${today.getDay()}`;
    }
    getTranslation(lang) {
        const requests = this.resources.map(config => this.http.get(`${config.prefix}${lang}${this.getSuffix(config.suffix)}`));
        return forkJoin(requests).pipe(map(responseArray => {
            return responseArray.reduce((acc, current) => {
                return { ...acc, ...current };
            }, {});
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,